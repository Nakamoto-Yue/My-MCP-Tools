@mcp.tool()
def get_picture_by_time(times: str) -> list:
    """
    根据用户输入的多个时间（支持任意常见日期格式），返回pictures文件夹中对应的降雨色斑图文件名列表。
    参数：
        times: 逗号、“和”或其它常见分隔符分隔的时间字符串，支持如2025/7/9、2025年7月9日、2025-7-9、2025 7 9等格式
    返回：
        匹配的图片文件名列表（找不到则抛出异常）
    """
    import os
    from datetime import datetime
    import re

    def parse_date(date_str):
        date_str = date_str.strip()
        # 先尝试匹配中文日期格式
        m = re.match(r"(\d{4})年(\d{1,2})月(\d{1,2})日?", date_str)
        if m:
            year, month, day = m.groups()
            return f"{year}-{month.zfill(2)}-{day.zfill(2)}"
        # 统一替换为-分隔
        date_str = re.sub(r'[年./\\]', '-', date_str)
        date_str = re.sub(r'[日]', '', date_str)
        date_str = re.sub(r'\s+', '-', date_str)
        parts = [p for p in date_str.split('-') if p]
        if len(parts) != 3:
            raise ValueError(f"无法识别的日期格式: {date_str}")
        year = parts[0]
        month = parts[1].zfill(2)
        day = parts[2].zfill(2)
        return f"{year}-{month}-{day}"

    pictures_dir = os.path.join(os.path.dirname(__file__), 'pictures')
    files = os.listdir(pictures_dir)
    result = []

    # 修正分割逻辑，确保所有分隔符都能正确分割
    if isinstance(times, str):
        # 用正则一次性分割所有可能的分隔符
        time_list = [t.strip() for t in re.split(r'[，,和\s]+', times) if t.strip()]
    elif isinstance(times, list):
        time_list = times
    else:
        raise ValueError("输入格式错误，应为逗号、'和'分隔的日期字符串或字符串列表")

    for time_str in time_list:
        try:
            norm_date = parse_date(time_str)
        except Exception:
            raise ValueError(f"无法识别的日期格式: {time_str}，请用如2025-7-9、2025/7/9、2025年7月9日等常见格式")
        ymd = norm_date.replace('-', '')
        single_day_file = f"{ymd}.png"
        if single_day_file in files:
            result.append(single_day_file)
            continue
        time_str_full = ymd + "00"
        input_time = datetime.strptime(time_str_full, "%Y%m%d%H")
        found = False
        for fname in files:
            if '_' in fname and fname.endswith('.png'):
                try:
                    start_str, end_str = fname[:-4].split('_')
                    start_time = datetime.strptime(start_str, "%Y%m%d%H")
                    end_time = datetime.strptime(end_str, "%Y%m%d%H")
                    if start_time <= input_time < end_time:
                        result.append(fname)
                        found = True
                        break
                except Exception:
                    continue
        if not found and single_day_file not in result:
            raise FileNotFoundError(f"未找到{norm_date}对应时间的图片")
    return result